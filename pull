#!/bin/bash
#
# Takes 3 parameters, 
# 1st comma separated list of repos for which you want to pull code from "origin"
# 2nd comma separated list of repos for which you want to pull code from "upstream"
# 3rd relative path of gateway folder
# You'll need to change value of variable "svnSiqRepoPath" to set path of gateway folder relative to git hub Root folder

. mypaths.sh

pushd . > /dev/null
cd $gitHome

localUpdatedRepos=""
upstreamUpdatedRepos=""


if [ $1 ]; then localRepos="$1"; fi
if [ $2 ]; then upstreamRepos="$2"; fi
if [ $3 ]; then svnSiqRepoPath="$3"; fi

localArr=$(echo $localRepos | tr "," "\n")
upstreamArr=$(echo $upstreamRepos | tr "," "\n")

function quit  {
	if [ "$1" ]; then echo "Error Message: $1"; fi

	for x in $localArr
	do
		if [ -f ~/tmppull$x.txt ]; then 
			grep -q "Already up-to-date." ~/tmppull$x.txt
			if [ $? -ne 0 ]; then
				grep -wq "warning:\|error:\|fatal:" ~/tmppull$x.txt
				if [ $? -eq 0 ]; then
					localFailedRepos=${localFailedRepos}" ,"$x
				else
					localUpdatedRepos=${localUpdatedRepos}" ,"$x
				fi
			fi 
			Echo -ne Pull result for $x:" "  
			cat ~/tmppull$x.txt
			rm ~/tmppull$x.txt
		fi
	done

	for x in $upstreamArr
	do
		if [ -f ~/tmpfetch$x.txt ]; then 
			grep -q "Already up-to-date." ~/tmpfetch$x.txt
			if [ $? -ne 0 ]; then
				grep -wq "warning:\|error:\|fatal:" ~/tmpfetch$x.txt
				if [ $? -eq 0 ]; then
					upstreamFailedRepos=${upstreamFailedRepos}" ,"$x
				else
					grep -wq "Fetch result for" ~/tmpfetch$x.txt
					if [ $? -ne 0 ]; then
						upstreamUpdatedRepos=${upstreamUpdatedRepos}" ,"$x
					fi 
				fi
			fi
			Echo -ne Fetch result for $x:" "  
			cat ~/tmpfetch$x.txt
			rm ~/tmpfetch$x.txt
		fi
	done

	if [ "$localUpdatedRepos" != "" ]; then
		echo -e "\033[32;3;140mLocal Repos Updated $localUpdatedRepos"
	fi
	if [ "$localFailedRepos" != "" ]; then
		echo -e "\033[31;3;140mLocal Repos FAILED  $localFailedRepos"
	fi
	if [ "$upstreamUpdatedRepos" != "" ]; then
		echo -e "\033[32;3;140mUpstream Repos Updated $upstreamUpdatedRepos"
	fi
	if [ "$upstreamFailedRepos" != "" ]; then
		echo -e "\033[31;3;140mUpstream Repos FAILED $upstreamFailedRepos"
	fi

	popd > /dev/null
	exit 0 
}

echo Updating Local Repos [$localRepos]

function pullProject {
	cd $1
	if [ $? -ne 0 ]; then quit; fi
	git pull &> ~/tmppull$1.txt 
	cd - &> /dev/null
}

function fetchProject {
	cd $1
	if [ $? -ne 0 ]; then quit; fi
	git fetch upstream

	# to find out existing branch name
	branch_name=$(git symbolic-ref -q HEAD)
	branch_name=${branch_name##refs/heads/}
	branch_name=${branch_name:-HEAD}
	
	if [ $branch_name != 'master' ]; then
		echo Switching to master branch, current branch $branch_name
		git checkout master	&> ~/tmpfetch$1.txt
		if [ $? -ne 0 ]; then 
			cd - &> /dev/null
			return; 
		fi
	fi
	
	git merge upstream/master &> ~/tmpfetch$1.txt

	if [ $branch_name != 'master' ]; then
		echo Switching back to $branch_name
		git checkout "$branch_name"	2>> ~/tmpfetch$1.txt
	fi
	
	cd - &> /dev/null
}

for x in $localArr
do
	pullProject $x &
done
wait

echo Updating Repos from upstream [$upstreamRepos]

for x in $upstreamArr
do
	fetchProject $x &
done
wait

echo
echo Updating Gateway
pwd
cd $svnSiqRepoPath	
if [ $? -ne 0 ]; then quit; fi
svn update
if [ $? -ne 0 ]; then
	quit "Unable to update gateway code."
fi

quit
