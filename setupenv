#!/bin/bash
#
# Shell script to reset the environment after a code get and perform all the install steps
# $1 would identify cacheClean mode. if clean  then clean cache otherwise assume it to be a project name.

. myPaths.sh

pushd .
cd $gitHome

function setup  {
	#Save folder context for later pop
	pushd .
	
	echo working project set to "$1"
	cd $1
	if [ $? -ne 0 ]; then
		echo 'Error locating project, ensure that you are launching from the folder where project is cloned'
		exit 1
	fi

	# remove node modules/ they will be setup again
	mkdir -p node_modules &> /dev/null
	cd node_modules
	if [ $? -ne 0 ]; then exit 1; fi
	#failsafe to remove mklinked folders without removing source content.
	rmdir * &> /dev/null
	rm -rf *
	cd -

	#remove static components
	if [ "$1" == 'dax' -o "$1" == 'daft' -o "$1" == 'glad' ]; then
		mkdir -p static/components &> /dev/null
		cd static/components
		if [ $? -ne 0 ]; then exit 1; fi
	else
		mkdir -p .test/static/components &> /dev/null
		cd .test/static/components
		if [ $? -ne 0 ]; then exit 1; fi
	fi
	
	# remove all but the linked directory
	#failsafe to remove mklinked folders without removing source content.
	rmdir $(ls | grep -v $2) &> /dev/null
	rm -rf $(ls | grep -v $2)
	cd -

	if [ "$1" == 'dax' -o "$1" == 'daft' -o "$1" == 'glad' ]; then
		echo Baking bindings for /static/components/models/security/1.0
		mkdir -p static/components/models/security/1.0 &> /dev/null
		cd ../bastion
		if [ $? -ne 0 ]; then exit 1; fi
		bake -m mesh.tasks mesh.javascript bundle=bastion.security.bundle version=[1,0] path="../"$1"/static/components/models/security/1.0"
		cd -
	fi

	if [ "$1" == 'dax' -o "$1" == 'daft' -o "$1" == 'glad' ]; then
		echo Baking bindings for /static/components/models/users/1.0
		mkdir -p static/components/models/users/1.0 &> /dev/null
		cd ../bastion
		if [ $? -ne 0 ]; then exit 1; fi
		bake -m mesh.tasks mesh.javascript bundle=bastion.users.bundle version=[1,0] path="../"$1"/static/components/models/users/1.0"
		cd -
	fi
	if [ "$1" == 'dax' -o "$1" == 'daft' ]; then
		echo Baking bindings for /static/components/models/explorers/1.0
		mkdir -p static/components/models/explorers/1.0 &> /dev/null
		cd $gatewayHome
		if [ $? -ne 0 ]; then exit 1; fi
		bake -m mesh.tasks mesh.javascript bundle=local.gateway.api.bundles.EXPLORERS_API version=[1,0] path=$projRPath$1"/static/components/models/explorers/1.0"
		cd -
	fi

	if [ "$1" == 'dax' -o "$1" == 'daft' ]; then
		echo Baking bindings for /static/components/models/gateway/1.0
		mkdir -p static/components/models/gateway/1.0 &> /dev/null
		cd $gatewayHome
		if [ $? -ne 0 ]; then exit 1; fi
		bake -m mesh.tasks mesh.javascript bundle=gateway.api.bundles.GATEWAY_API version=[1,0] path=$projRPath$1"/static/components/models/gateway/1.0"
		cd -
	fi
	
	if [ "$1" == 'glad' ]; then
		echo Baking bindings for /static/components/models/administrative/1.0
		mkdir -p static/components/models/administrative/1.0 &> /dev/null
		cd $gatewayHome
		if [ $? -ne 0 ]; then exit 1; fi
		bake -m mesh.tasks mesh.javascript bundle=gateway.api.bundles.ADMINISTRATIVE_API version=[1,0] path=$projRPath$1"/static/components/models/administrative/1.0"
		cd -
	fi
	
	if [ "$1" == 'dax' -o "$1" == 'daft' -o "$1" == 'glad' ]; then
		echo Baking bindings for /static/components/models/enamel/1.0
		mkdir -p static/components/models/enamel/1.0 &> /dev/null
		cd ../enamel
		if [ $? -ne 0 ]; then exit 1; fi
		bake -m mesh.tasks mesh.javascript bundle=enamel.API version=[1,0] path="../"$1"/static/components/models/enamel/1.0"
		cd -
	fi
	
	npm install
	
	popd
}

for i in "$@"
do
	if [ "$i" == 'clean' ]; then
		npm cache clean csi
		npm cache clean gloss
		npm cache clean siq-lookandfeel
		npm cache clean siq-mesh
		npm cache clean dax
		npm cache clean auxl
		npm cache clean siq-vendor-js
		npm cache clean bedrockjs
	else
		#eval is a plague. Must find a better way. Upgrading to bash 4 would help.
		eval export value='$'$i
		projects=$i"\|"$value
		setup $i $projects
	fi
done

#Call Generate Script
generate

popd
